思考
****

对于三维画图，就是点线面过程。并且每一块的依赖关系问题。 再然后就是一组点与另一组点的之间的依赖关系。有了这些依赖关系，这样才能实时的解算最终的效果。


例如拿你人像来说，其实每一帧都是完全从头画的，但是存储模型的时候，只能是存储一个标准形，然后那就是根据原始状态去计算了。 对于 :math:`y=f(t0)+f(t-t0)` 对于这种计算最简单的，只需要记录初时值，然后根据时间来更新就可以了。 对于 :math:`y=f(x_{n-1)} + \delta f(x_n- x_{n-1})` 这一种就复杂了，一种是简单的转化为前者来计算了，另一种记录一些特殊的点进然后进行插值。 这个能不能用直接利用极数来进行插值呢，就像那个tanbo模型。 而不是简单一次插值或得二次插值。最加头疼的问题，这个方程更加复杂而不仅于 :math:`n-1` 相关，如果  :math:`x_n=f(x_n) + f(x_{n-1}) + f(x_{n-2}) \cdot\cdot\cdot` 这个对于原来的信息的存储与计算是更大的压力。 而在游戏里面，这时候也就是需要小动画的时候了，来简单模拟了，例如更让变化。同时保存3帧以上的数据，然后来计算出下帧。而当前的做法是如何来不存保存上一帧的数据的。尤其是实时渲染。离线的渲染还可以处理好更多的细节。 

对于实时的计算来说，还需要考虑数据的保存与传输速度。


另外对于对于者只需要opengl的那些T&L 变换就可以搞定了，而后者就不行了，例如粒子系统等以及要用细分与freedback功能。并且这种需要记录实时状态数据的特效在引擎中又是如何实现与保存的呢。使用临时文件吗。

例如游戏中子弹的飞行以及火焰都是如何保存的。另一种办法那就physical-based rendering,这里只保存子弹的基本元素，然后都通过物理计算获得，所以在物理的render之间先要经过physical simulating.

在更大的范围是那就是空间管理了，哪些物体要参与这物理仿真的计算。然后状态的更新，视角的变换是在T&L变换的视锥中才减的。

